<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Playlist</title>
    <link rel="icon" type="image/png" href="https://res.cloudinary.com/dqfnwh89v/image/upload/v1724408615/qxvvfcf7ftgklhl2k03v.png">
    <link rel="stylesheet" href="/css/newPlaylist.css">
    <!-- SweetAlert CSS -->

  <link rel="stylesheet" href="/css/font.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
</head>

<body>
    <div class="newPlaylist">
        <div class="header">
            <!-- Header content, unchanged -->
            <!-- <button onclick="sendSelectedItemsToBackend()">Publish</button> -->
            <button style="margin-left: 10px;" onclick="exitfunction()">Exit</button>
            <button id="previewButton" onclick="previewAlert()">Preview</button>
            <button style="margin-right: 10px;" onclick="selectScreen()">Next</button>
            <div id="videoOverlay">
                <div id="videoContainer">
                    <!-- Videos will be displayed here -->
                </div>
                <button id="closeButton">Close</button>
            </div>
        </div>
        <div class="main">
            <div class="media-sidebar">
                <div class="media-widgets">
                    <p class="media">Media</p>
                    <p class="widgets">Widgets</p>
                </div>
                <div class="search-upload" style="display: none;">
                    <input type="search" name="search" placeholder="Search">
                    <button class="media-btn-upload" id="uploadButton"><svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <circle cx="15" cy="15" r="15" fill="#0D6EFD" />
                        <path d="M21.75 17.25V20.25C21.75 20.6478 21.592 21.0294 21.3107 21.3107C21.0294 21.592 20.6478 21.75 20.25 21.75H9.75C9.35218 21.75 8.97064 21.592 8.68934 21.3107C8.40804 21.0294 8.25 20.6478 8.25 20.25V17.25" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                        <path d="M18.75 12L15 8.25L11.25 12" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                        <path d="M15 8.25V17.25" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                    </button>
                    <form id="uploadForm" action="/Dashboard/Playlist/UploadFile" method="POST" enctype="multipart/form-data" style="display: none;">
                        <input type="file" name="file" id="fileInput">
                        <button type="submit" id="submitBtn">Upload</button>
                    </form>
                </div>
                <div class="media-category">
                    <button class="media-all"><a href="/Dashboard/Playlist/newPlaylist">All</a></button>
                    <button class="media-photos" style="display: none;"><a href="/Dashboard/Playlist/Photoes">Photos</a></button>
                    <button class="media-videos" style="display: none;"><a href="/Dashboard/Playlist/Videos">Videos</a></button>
                </div>
                <div class="show-media">
                    <!-- Media files loop -->
                    <% mediafiles.forEach(function (file) { %>
                      <div class="media-container">
                        <% if (file.type && file.type.startsWith('image/')) { %>
                          <img src="<%= file.url %>"
                               alt="Image"
                               class="media-item image-item"
                               data-layout-name="<%= file.filename %>"
                               data-duration="<%= file.durationString %>"
                               data-size="<%= file.size %> MB">
                        <% } else if (file.type && file.type.startsWith('video/')) { %>
                          <div class="video-wrapper">
                            <video controls
                                   class="media-item video-item"
                                   preload="metadata">
                              <source src="<%= file.url %>"
                                      type="<%= file.type %>"
                                      data-layout-name="<%= file.filename %>"
                                      data-duration="<%= file.durationString %>"
                                      data-size="<%= file.size %> MB">
                              Your browser does not support the video tag.
                            </video>
                            <div class="video-name-overlay"><%= file.filename %></div>
                          </div>
                        <% } else { %>
                          <p>Unsupported file type: <%= file.type %></p>
                        <% } %>
                      </div>
                    <% }); %>
                  </div>
                  <style>
                    /* Ensure the video wrapper is positioned correctly */
                    .video-wrapper {
                      position: relative;
                      display: inline-block;
                      width: 100%; /* Adjust as needed */
                      max-width: 500px; /* Example max width */
                    }
                    /* Styling for the filename overlay */
                    .video-name-overlay {
                      position: absolute;
                      bottom: 10px;
                      left: 10px;
                      background-color: rgba(0, 0, 0, 0.7);
                      color: white;
                      padding: 5px;
                      border-radius: 4px;
                      opacity: 0;
                      transition: opacity 0.3s;
                      pointer-events: none;
                      font-size: 14px;
                    }
                    /* Show the overlay on hover */
                    .video-wrapper:hover .video-name-overlay {
                      opacity: 1;
                    }
                  </style>
            </div>
            <div class="middle">
                <div class="img-preview">

                </div>
                <div class="img-slider" id="imgSlider">
                    
                </div>
            </div>
            <div class="layout-info">
               <div class="info-class">
                <p>Layout Name</p>
                <input class="layout" type="text" id="layout-name" readonly>                               
               </div>
               <div class="info-class">
                <p>Duration</p>
                <input class="layout" type="text" id="duration" readonly>
               </div>
               <div class="info-class">
                <p>size</p>
                <input class="layout" type="text" id="size" readonly>
               </div>
            </div>
        </div>
    </div>
    
    <!-- SweetAlert JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <!-- <script src="/javaScripts/newPlaylist.js"></script> -->
    <script>
    document.addEventListener("DOMContentLoaded", function () {

const playlistName = sessionStorage.getItem("playlistName");
const playlistDescription = sessionStorage.getItem("playlistDescription");
let selectedItems = []; // Array to store selected item URLs

window.playlistName = playlistName;
window.playlistDescription = playlistDescription;

function selectScreen(){
    if(selectedItems.length===0){
        Swal.fire({
            title: 'Select Layout First',
            text: 'Please select a layout before proceeding.',
            icon: 'info',
            confirmButtonText: 'OK'
        });
        return;
    }

    window.location.href = "/customer-playlist/newPlaylist/selectScreens";
}
window.selectScreen=selectScreen;

const buttons = document.querySelectorAll(".media-category button");
buttons.forEach((button) => {
  const link = button.querySelector("a");
  button.addEventListener("click", function (event) {
    event.preventDefault(); // Prevent the default link behavior
    setActiveButton(button);
    window.location.href = link.getAttribute("href"); // Navigate to the link
  });
});

function setActiveButton(activeButton) {
  buttons.forEach((button) => {
    if (button === activeButton) {
      button.classList.add("active");
    } else {
      button.classList.remove("active");
    }
  });
}

// Initial check for the active button based on the current URL                         
const currentUrl = window.location.pathname;
let activeButtonFound = false;
buttons.forEach((button) => {
  const link = button.querySelector("a");
  if (link.getAttribute("href") === currentUrl) {
    button.classList.add("active");
    activeButtonFound = true;
  }
});

// If no button matches the current URL, default to the "All" button
if (!activeButtonFound) {
  const allButton = document.querySelector(".media-category .media-all");
  allButton.classList.add("active");
}
document
  .getElementById("uploadButton")
  .addEventListener("click", function () {
    document.getElementById("fileInput").click();
  });

document.getElementById("fileInput").addEventListener("change", function () {
  document.getElementById("uploadForm").submit();
});

const mediaItems = document.querySelectorAll(".media-item");
const imgSlider = document.getElementById("imgSlider");
const imgPreview = document.querySelector(".img-preview");
let itemsCount = 0; // Counter to track the number of items

mediaItems.forEach((item) => {
  item.addEventListener("click", function () {
    if (itemsCount < 50) {
      // Check if the number of items is less than 50
      if (item.tagName.toLowerCase() === "img") {
        const img = document.createElement("img");
        img.src = item.src;
        img.classList.add("slider-item");
        img.setAttribute(
          "data-layout-name",
          item.getAttribute("data-layout-name")
        );
        img.setAttribute("data-duration", item.getAttribute("data-duration"));
        img.setAttribute("data-size", item.getAttribute("data-size"));
        imgSlider.appendChild(img);
        selectedItems.push(item.src);
        itemsCount++;
      } else if (item.tagName.toLowerCase() === "video") {
        const video = document.createElement("video");
        video.controls = true;
        video.classList.add("slider-item");
        const source = document.createElement("source");
        source.src = item.querySelector("source").src;
        source.type = item.querySelector("source").type;
        source.setAttribute(
          "data-layout-name",
          item.querySelector("source").getAttribute("data-layout-name")
        );
        source.setAttribute(
          "data-duration",
          item.querySelector("source").getAttribute("data-duration")
        );
        source.setAttribute(
          "data-size",
          item.querySelector("source").getAttribute("data-size")
        );

        video.appendChild(source);
        imgSlider.appendChild(video);
        selectedItems.push(source.src);
        itemsCount++;
      }
    } else {
      Swal.fire({
        title: 'Limit Reached',
        text: 'You can only select up to 50 items.',
        icon: 'warning',
        confirmButtonText: 'OK'
      });
    }
    const selectedurls = JSON.stringify(selectedItems);
    sessionStorage.setItem("selectedItems", selectedurls);
  });
});

const layoutNameInput = document.getElementById("layout-name");
const durationInput = document.getElementById("duration");
const sizeInput = document.getElementById("size");
let selectedElement = null;
imgSlider.addEventListener("click", function (event) {
  const target = event.target;
  if (target.classList.contains("slider-item")) {
    imgPreview.innerHTML = ""; // Clear previous content
    if (selectedElement) {
      selectedElement.style.border = ""; // Reset to original
    }
    target.style.borderColor = "#0D6EFD";
    selectedElement = target; //
    let layoutName, duration, size;
    if (target.tagName.toLowerCase() === "img") {
      const img = document.createElement("img");
      img.src = target.src;
      img.classList.add("preview-item");
      layoutName = target.getAttribute("data-layout-name");
      duration = target.getAttribute("data-duration");
      size = target.getAttribute("data-size");
      imgPreview.appendChild(img);
    } else if (target.tagName.toLowerCase() === "video") {
      const video = document.createElement("video");
      video.controls = true;
      video.classList.add("preview-item");
      const source = document.createElement("source");
      source.src = target.querySelector("source").src;
      source.type = target.querySelector("source").type;
      video.appendChild(source);
      imgPreview.appendChild(video);
      const sourceElement = target.querySelector("source");
      layoutName = sourceElement.getAttribute("data-layout-name");
      duration = sourceElement.getAttribute("data-duration");
      size = sourceElement.getAttribute("data-size");
    }
    layoutNameInput.value = layoutName;
    durationInput.value = duration;
    sizeInput.value = size;
  }
});

let currentVideoIndex = 0; // Track current video index
let isPlaying = false; // Track if a video is currently playing

// Function to create video elements with autoplay
function createVideoElement(url) {
    const video = document.createElement('video');
    video.src = url;
    video.controls = false;
    video.autoplay = false; // Autoplay set to false initially
    video.style.display = 'none'; // Hide video initially
    return video;
}

// Function to play the next video in sequence
function playNextVideo() {
    if (currentVideoIndex < selectedItems.length) {
        const videoElement = createVideoElement(selectedItems[currentVideoIndex]);
        const videoContainer = document.getElementById('videoContainer');

        // Append new video element without clearing the previous video
        videoContainer.appendChild(videoElement);

        // Listen for when the video can play through
        videoElement.addEventListener('canplaythrough', () => {
            // Show and play the video once it is ready
            videoElement.style.display = 'block';
            videoElement.play().then(() => {
                // Hide the previous video, if any
                const previousVideos = videoContainer.querySelectorAll('video:not([style*="display: none"])');
                previousVideos.forEach((prevVideo) => {
                    if (prevVideo !== videoElement) {
                        prevVideo.style.display = 'none';
                        prevVideo.pause();
                        prevVideo.remove();
                    }
                });

                // Add event listener to handle end of video playback
                videoElement.addEventListener('ended', () => {
                    currentVideoIndex++;
                    if (currentVideoIndex < selectedItems.length) {
                        playNextVideo(); // Play the next video after this one ends
                    } else {
                        isPlaying = false; // All videos played, reset isPlaying flag
                    }
                });
            }).catch((error) => {
                console.error('Error playing video:', error);
                isPlaying = false; // Reset isPlaying flag on error
            });
        });
    }
}

// Function to display videos in the modal overlay
function displayVideos() {
    if(selectedItems.length==0){
        Swal.fire({
            title: 'Select Layout First',
            text: 'Please select a layout before previewing.',
            icon: 'info',
            confirmButtonText: 'OK'
        });
        return;
    }
    // Show the modal overlay
    const videoOverlay = document.getElementById('videoOverlay');
    videoOverlay.style.display = 'flex';

    // Start playing videos if not already playing
    if (!isPlaying) {
        isPlaying = true;
        playNextVideo();
    }
}

// Event listener for preview button click
document.getElementById('previewButton').addEventListener('click', displayVideos);

// Event listener for closing modal overlay
document.getElementById('closeButton').addEventListener('click', function() {
    const videoOverlay = document.getElementById('videoOverlay');
    const videoContainer = document.getElementById('videoContainer');

    // Pause current video (if any)
    const currentVideo = videoContainer.querySelector('video');
    if (currentVideo) {
        currentVideo.pause();
    }

    // Hide the modal overlay
    videoOverlay.style.display = 'none';

    // Reset current video index and isPlaying flag
    currentVideoIndex = 0;
    isPlaying = false;
});

});




function exitfunction() {
Swal.fire({
    title: 'Are you sure?',
    text: "Do you want to exit and discard changes?",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, exit!'
}).then((result) => {
    if (result.isConfirmed) {
        window.history.back();
    }
})
}
    </script>
</body>

</html>
